package org.example.behavioral; 

/*    Паттерн Стратегия (Strategy) — это поведенческий паттерн проектирования, который позволяет определить семейство алгоритмов,
инкапсулировать каждый из них и сделать их взаимозаменяемыми. Паттерн Стратегия позволяет алгоритму варьировать независимо от клиентов,
которые его используют. Этот паттерн часто используется для реализации различных способов выполнения задачи,
позволяя легко переключаться между разными алгоритмами или стратегиями во время выполнения программы.
    Концепция
Основная идея паттерна Стратегия заключается в том, что у вас есть контекст, который содержит ссылку на стратегию,
и несколько различных реализаций интерфейса стратегии. Контекст перенаправляет запросы от клиента к стратегии,
не исследуя конкретные детали алгоритмов. Это позволяет менять алгоритмы обработки данных в контексте, не изменяя код, который использует контекст.

    Структура
1)Стратегия (Strategy): интерфейс стратегии определяет метод, который должны реализовывать все конкретные стратегии.
2)Конкретная Стратегия (Concrete Strategy): конкретные реализации интерфейса стратегии, каждая из которых реализует алгоритм.
3)Контекст (Context): содержит ссылку на объект стратегии и может определить интерфейс, который представляет интерес для клиентов.
Контекст не знает конкретный класс стратегии и общается со всеми стратегиями через интерфейс стратегии.

    Пример использования на Java*/

interface SortingStrategy {
    void sort(int[] array);
}

// Конкретная реализация стратегии для сортировки пузырьком
 class BubbleSortStrategy implements SortingStrategy {
    public void sort(int[] array) {
        // Реализация сортировки пузырьком
        System.out.println("Sorting array using bubble sort");
    }
}

// Конкретная реализация стратегии для быстрой сортировки
 class QuickSortStrategy implements SortingStrategy {
    public void sort(int[] array) {
        // Реализация быстрой сортировки
        System.out.println("Sorting array using quick sort");
    }
}

// Контекст
 class SortedArray {
    private SortingStrategy strategy;

    public SortedArray(SortingStrategy strategy) {
        this.strategy = strategy;
    }

    public void sort(int[] array) {
        strategy.sort(array);
    }

    // Метод для смены стратегии
    public void setStrategy(SortingStrategy strategy) {
        this.strategy = strategy;
    }
}

// Демонстрация использования паттерна Стратегия
public class StrategyPattern {
    public static void main(String[] args) {
        SortedArray array = new SortedArray(new BubbleSortStrategy());
        array.sort(new int[]{1, 3, 2});

        // Смена стратегии на быструю сортировку
        array.setStrategy(new QuickSortStrategy());
        array.sort(new int[]{1, 3, 2});
    }
}
/*В этом примере SortedArray является контекстом, который использует различные стратегии сортировки.
Стратегия сортировки может быть изменена во время выполнения программы, что позволяет легко изменять алгоритм сортировки без изменения контекста или клиентского кода.*/
