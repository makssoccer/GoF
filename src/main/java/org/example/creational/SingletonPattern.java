package org.example.creational;

/*    Паттерн Singleton (Одиночка) относится к категории порождающих паттернов проектирования и используется для создания класса,
который гарантирует, что у него будет только один экземпляр, и предоставляет глобальную точку доступа к этому экземпляру.

        Реализация паттерна Singleton в Java:*/

// Класс Singleton
class Singleton {
    // Приватное статическое поле для хранения единственного экземпляра класса
    private static Singleton instance;

    // Приватный конструктор, чтобы предотвратить создание экземпляров класса вне класса
    private Singleton() {
    }

    // Публичный статический метод для получения единственного экземпляра класса
    public static Singleton getInstance() {
        // Если экземпляр еще не создан, создаем его
        if (instance == null) {
            instance = new Singleton();
        }
        // Возвращаем существующий экземпляр
        return instance;
    }

    // Методы экземпляра класса
    public void someMethod() {
        System.out.println("Executing some method");
    }
}

// Пример использования
public class SingletonPattern {
    public static void main(String[] args) {
        // Получение экземпляра Singleton
        Singleton singleton1 = Singleton.getInstance();
        Singleton singleton2 = Singleton.getInstance();
        
        // Вызов метода объекта Singleton
        singleton1.someMethod();
        
        // Проверка, что оба экземпляра ссылаются на один и тот же объект
        System.out.println("singleton1 == singleton2: " + (singleton1 == singleton2));
    }
}
/*
        Преимущества паттерна Singleton:
1. Гарантированное наличие единственного экземпляра: Паттерн Singleton гарантирует, что в системе существует только один экземпляр класса.
2. Глобальный доступ: Единственный экземпляр класса доступен через глобальную точку доступа.
3. Ленивая инициализация: Экземпляр класса создается только по запросу, что может уменьшить нагрузку на систему в случае, если создание объекта требует значительных ресурсов.
        Недостатки паттерна Singleton:
1. Нарушение принципа единственной ответственности: Singleton может собирать слишком много функций, что противоречит принципу единственной ответственности.
2. Потенциальные проблемы с многопоточностью: Реализация Singleton может привести к проблемам с многопоточностью, особенно в многопоточной среде.
Можно использовать синхронизацию или двойную проверку блокировки для обеспечения безопасности в многопоточной среде.

Паттерн Singleton полезен, когда в приложении требуется иметь глобально доступный и единственный экземпляр класса, например,
для доступа к конфигурационным данным, пулу соединений к базе данных и т. д.*/

